{"name": "test_hrm_login_positive", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "setup = <selenium.webdriver.edge.webdriver.WebDriver (session=\"3887a7939c55e39bdb39f5852a99a3f3\")>\n\n    @allure.epic(\"  Orange HRM Login Test\")\n    @allure.feature(\"Orange HRM Login Positive Test\")\n    @pytest.mark.positive\n    def test_hrm_login_positive(setup):\n        loginpage = LoginPage(driver=setup)\n        loginpage.login_to_hrm(user=\"admin\", password=\"Hacker@4321\")\n        time.sleep(2)\n>       webdriver_wait_url(driver=setup)\n\ntests\\testcases\\test_login_hrm.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntests\\utils\\common_utilities.py:5: in webdriver_wait_url\n    WebDriverWait(driver=driver, timeout=2).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3887a7939c55e39bdb39f5852a99a3f3\")>, method = <function url_changes.<locals>._predicate at 0x0000021E0B38D260>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "start": 1727253627672, "stop": 1727253632848, "uuid": "1c7ba1b9-076f-4abb-b7d8-8e1106692d57", "historyId": "60be63e9aebcace1c18bcafae7decfc7", "testCaseId": "60be63e9aebcace1c18bcafae7decfc7", "fullName": "tests.testcases.test_login_hrm#test_hrm_login_positive", "labels": [{"name": "epic", "value": "  Orange HRM Login Test"}, {"name": "feature", "value": "Orange HRM Login Positive Test"}, {"name": "tag", "value": "positive"}, {"name": "parentSuite", "value": "tests.testcases"}, {"name": "suite", "value": "test_login_hrm"}, {"name": "host", "value": "LAPTOP-BELRSIMA"}, {"name": "thread", "value": "23264-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.testcases.test_login_hrm"}]}